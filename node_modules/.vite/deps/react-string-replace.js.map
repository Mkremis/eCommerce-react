{
  "version": 3,
  "sources": ["../../react-string-replace/index.js"],
  "sourcesContent": ["/* eslint-disable vars-on-top, no-var, prefer-template */\r\nvar isRegExp = function (re) { \r\n  return re instanceof RegExp;\r\n};\r\nvar escapeRegExp = function escapeRegExp(string) {\r\n  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g,\r\n    reHasRegExpChar = RegExp(reRegExpChar.source);\r\n\r\n  return (string && reHasRegExpChar.test(string))\r\n    ? string.replace(reRegExpChar, '\\\\$&')\r\n    : string;\r\n};\r\nvar isString = function (value) {\r\n  return typeof value === 'string';\r\n};\r\nvar flatten = function (array) {\r\n  var newArray = [];\r\n\r\n  array.forEach(function (item) {\r\n    if (Array.isArray(item)) {\r\n      newArray = newArray.concat(item);\r\n    } else {\r\n      newArray.push(item);\r\n    }\r\n  });\r\n\r\n  return newArray;\r\n};\r\n\r\n/**\r\n * Given a string, replace every substring that is matched by the `match` regex\r\n * with the result of calling `fn` on matched substring. The result will be an\r\n * array with all odd indexed elements containing the replacements. The primary\r\n * use case is similar to using String.prototype.replace except for React.\r\n *\r\n * React will happily render an array as children of a react element, which\r\n * makes this approach very useful for tasks like surrounding certain text\r\n * within a string with react elements.\r\n *\r\n * Example:\r\n * matchReplace(\r\n *   'Emphasize all phone numbers like 884-555-4443.',\r\n *   /([\\d|-]+)/g,\r\n *   (number, i) => <strong key={i}>{number}</strong>\r\n * );\r\n * // => ['Emphasize all phone numbers like ', <strong>884-555-4443</strong>, '.'\r\n *\r\n * @param {string} str\r\n * @param {RegExp|str} match Must contain a matching group\r\n * @param {function} fn\r\n * @return {array}\r\n */\r\nfunction replaceString(str, match, fn) {\r\n  var curCharStart = 0;\r\n  var curCharLen = 0;\r\n\r\n  if (str === '') {\r\n    return str;\r\n  } else if (!str || !isString(str)) {\r\n    throw new TypeError('First argument to react-string-replace#replaceString must be a string');\r\n  }\r\n\r\n  var re = match;\r\n\r\n  if (!isRegExp(re)) {\r\n    re = new RegExp('(' + escapeRegExp(re) + ')', 'gi');\r\n  }\r\n\r\n  var result = str.split(re);\r\n\r\n  // Apply fn to all odd elements\r\n  for (var i = 1, length = result.length; i < length; i += 2) {\r\n    /** @see {@link https://github.com/iansinnott/react-string-replace/issues/74} */\r\n    if (result[i] === undefined || result[i - 1] === undefined) {\r\n      console.warn('reactStringReplace: Encountered undefined value during string replacement. Your RegExp may not be working the way you expect.');\r\n      continue;\r\n    }\r\n\r\n    curCharLen = result[i].length;\r\n    curCharStart += result[i - 1].length;\r\n    result[i] = fn(result[i], i, curCharStart);\r\n    curCharStart += curCharLen;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nmodule.exports = function reactStringReplace(source, match, fn) {\r\n  if (!Array.isArray(source)) source = [source];\r\n\r\n  return flatten(source.map(function(x) {\r\n    return isString(x) ? replaceString(x, match, fn) : x;\r\n  }));\r\n};\r\n"],
  "mappings": ";;;;;AAAA;AAAA;AACA,QAAI,WAAW,SAAU,IAAI;AAC3B,aAAO,cAAc;AAAA,IACvB;AACA,QAAI,eAAe,SAASA,cAAa,QAAQ;AAC/C,UAAI,eAAe,uBACjB,kBAAkB,OAAO,aAAa,MAAM;AAE9C,aAAQ,UAAU,gBAAgB,KAAK,MAAM,IACzC,OAAO,QAAQ,cAAc,MAAM,IACnC;AAAA,IACN;AACA,QAAI,WAAW,SAAU,OAAO;AAC9B,aAAO,OAAO,UAAU;AAAA,IAC1B;AACA,QAAI,UAAU,SAAU,OAAO;AAC7B,UAAI,WAAW,CAAC;AAEhB,YAAM,QAAQ,SAAU,MAAM;AAC5B,YAAI,MAAM,QAAQ,IAAI,GAAG;AACvB,qBAAW,SAAS,OAAO,IAAI;AAAA,QACjC,OAAO;AACL,mBAAS,KAAK,IAAI;AAAA,QACpB;AAAA,MACF,CAAC;AAED,aAAO;AAAA,IACT;AAyBA,aAAS,cAAc,KAAK,OAAO,IAAI;AACrC,UAAI,eAAe;AACnB,UAAI,aAAa;AAEjB,UAAI,QAAQ,IAAI;AACd,eAAO;AAAA,MACT,WAAW,CAAC,OAAO,CAAC,SAAS,GAAG,GAAG;AACjC,cAAM,IAAI,UAAU,uEAAuE;AAAA,MAC7F;AAEA,UAAI,KAAK;AAET,UAAI,CAAC,SAAS,EAAE,GAAG;AACjB,aAAK,IAAI,OAAO,MAAM,aAAa,EAAE,IAAI,KAAK,IAAI;AAAA,MACpD;AAEA,UAAI,SAAS,IAAI,MAAM,EAAE;AAGzB,eAAS,IAAI,GAAG,SAAS,OAAO,QAAQ,IAAI,QAAQ,KAAK,GAAG;AAE1D,YAAI,OAAO,CAAC,MAAM,UAAa,OAAO,IAAI,CAAC,MAAM,QAAW;AAC1D,kBAAQ,KAAK,+HAA+H;AAC5I;AAAA,QACF;AAEA,qBAAa,OAAO,CAAC,EAAE;AACvB,wBAAgB,OAAO,IAAI,CAAC,EAAE;AAC9B,eAAO,CAAC,IAAI,GAAG,OAAO,CAAC,GAAG,GAAG,YAAY;AACzC,wBAAgB;AAAA,MAClB;AAEA,aAAO;AAAA,IACT;AAEA,WAAO,UAAU,SAAS,mBAAmB,QAAQ,OAAO,IAAI;AAC9D,UAAI,CAAC,MAAM,QAAQ,MAAM;AAAG,iBAAS,CAAC,MAAM;AAE5C,aAAO,QAAQ,OAAO,IAAI,SAAS,GAAG;AACpC,eAAO,SAAS,CAAC,IAAI,cAAc,GAAG,OAAO,EAAE,IAAI;AAAA,MACrD,CAAC,CAAC;AAAA,IACJ;AAAA;AAAA;",
  "names": ["escapeRegExp"]
}
